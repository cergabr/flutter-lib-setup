#!/bin/sh

# shellcheck disable=SC1091
. "$(dirname "$0")/_/husky.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Read configuration
CONFIG_FILE="$(git rev-parse --show-toplevel)/.husky/hook_config.yaml"

# Function to read config value
read_config() {
  key=$1
  default_value=$2
  if [ -f "$CONFIG_FILE" ]; then
    value=$(grep -E "^[[:space:]]*${key}:[[:space:]]*(true|false)" "$CONFIG_FILE" | sed -E "s/^[[:space:]]*${key}:[[:space:]]*(true|false).*/\1/")
    if [ -n "$value" ]; then
      echo "$value"
    else
      echo "$default_value"
    fi
  else
    echo "$default_value"
  fi
}

# Read config values
ANALYZE_ENABLED=$(read_config "analyze" false)
FORMAT_ENABLED=$(read_config "format" false)

# Run Flutter analyze if enabled
if [ "$ANALYZE_ENABLED" = "true" ]; then
  echo "${YELLOW}Running Flutter analyze...${NC}"
  if ! flutter analyze --no-fatal-infos; then
    echo "${RED}Flutter analyze found issues. Please fix them before committing.${NC}"
    exit 1
  fi
else
  echo "${YELLOW}Flutter analyze check is disabled.${NC}"
fi

# Run Dart format if enabled
if [ "$FORMAT_ENABLED" = "true" ]; then
  echo "${YELLOW}Running Dart format verification...${NC}"
  # Exclude test files that test git hooks to avoid infinite loops
  FILES_TO_CHECK=$(find . -name "*.dart" -type f -not -path "*/\.*" -print0 | xargs -0 grep -L "@git-hooks-test-file" 2>/dev/null)
  if [ -z "$FILES_TO_CHECK" ]; then
    echo "${GREEN}No files to check for formatting.${NC}"
  else
    if ! echo "$FILES_TO_CHECK" | tr '\n' '\0' | xargs -0 dart format --output=none --set-exit-if-changed; then
      echo "${RED}Dart format check failed. Please format your code before committing:${NC}"
      echo "Run: dart format ."
      exit 1
    fi
  fi
else
  echo "${YELLOW}Dart format check is disabled.${NC}"
fi

echo "${GREEN}All checks passed!${NC}"
exit 0
